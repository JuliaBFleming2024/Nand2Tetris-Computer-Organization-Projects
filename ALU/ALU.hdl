/**
 * 16-bit Hack ALU from the book "The Elements of Computing Systems"
 * by Nisan and Schocken, MIT Press.
 * 
 * The ALU computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * 
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 * 
 * Implementation: the ALU logic manipulates the x and y inputs
 * and operates on the resulting values, as follows:
 * if (zx == 1) set x = 0        // 16-bit constant
 * if (nx == 1) set x = !x       // bitwise not
 * if (zy == 1) set y = 0        // 16-bit constant
 * if (ny == 1) set y = !y       // bitwise not
 * if (f == 1)  set out = x + y  // integer 2's complement addition
 * if (f == 0)  set out = x & y  // bitwise and
 * if (no == 1) set out = !out   // bitwise not
 * if (out == 0) set zr = 1
 * if (out < 0) set ng = 1
 * 
 * Author: Naga Kandasamy
 * Date created: July 10, 2020
 * Date modified: July 1, 2023
 * 
 * Name of student: Julia Fleming
 * Date modified: July 14, 2023
*/

CHIP ALU {
    IN  
        x[16], y[16],       // 16-bit inputs        
        zx,                 // zero the x input?
        nx,                 // negate the x input?
        zy,                 // zero the y input?
        ny,                 // negate the y input?
        f,                  // compute out = x + y (if 1) or x & y (if 0)
        no;                 // negate the out output?

    OUT 
        out[16],            // 16-bit output
        zr,                 // 1 if (out == 0), 0 otherwise
        ng;                 // 1 if (out < 0),  0 otherwise

    PARTS:
        //PRESENT
        Mux16 (a=x, b=false, sel=zx, out=mux1); 
        Mux16 (a=y, b=false, sel=zy, out=mux2);  

        Not16 (in=mux1, out=notmux1);
        Mux16 (a=mux1, b=notmux1, sel=nx, out=mux3);
        Not16 (in=mux2, out=notmux2);
        Mux16 (a=mux2, b=notmux2, sel=ny, out=mux4);

        And16 (a=mux3, b=mux4, out=temp1);
        Add16 (a=mux3, b=mux4, out=temp2);
        Mux16 (a=temp1, b=temp2, sel=f, out=mux5);

        //POST-SET
        Not16 (in=mux5, out=notmux5);
        Mux16 (a=mux5, b=notmux5, sel=no, out=out, out[0..7]=begins, out[8..15]=ends, out[15]=ng); 

        Or8Way (in=begins, out=orbegins);
        Or8Way (in=ends, out=orends);
        Or (a=orbegins, b=orends, out=orall);
        Not (in=orall, out=zr);

}